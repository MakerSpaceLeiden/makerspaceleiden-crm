# Generated by Django 3.2.23 on 2023-11-29 10:51

import django.db.models.deletion
import simple_history.models
from django.db import migrations, models

import acl.models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Entitlement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("active", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalEntitlement",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("active", models.BooleanField(default=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical entitlement",
                "verbose_name_plural": "historical entitlements",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalLocation",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=40)),
                ("description", models.CharField(blank=True, max_length=200)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical location",
                "verbose_name_plural": "historical locations",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalMachine",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=40)),
                (
                    "node_name",
                    acl.models.NodeField(
                        blank=True,
                        help_text="Name of the controlling node",
                        max_length=20,
                    ),
                ),
                (
                    "node_machine_name",
                    acl.models.NodeField(
                        blank=True,
                        help_text="Name of device or machine used by the node",
                        max_length=20,
                    ),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("requires_instruction", models.BooleanField(default=False)),
                ("requires_form", models.BooleanField(default=False)),
                ("out_of_order", models.BooleanField(default=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical machine",
                "verbose_name_plural": "historical machines",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalPermitType",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=40)),
                ("description", models.CharField(max_length=200)),
                (
                    "require_ok_trustee",
                    models.BooleanField(
                        default=False,
                        help_text="i.e. the trustees need to also explictly approve it when the permit is granted.",
                        verbose_name="Requires explicit trustee OK",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical permit type",
                "verbose_name_plural": "historical permit types",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=40, unique=True)),
                ("description", models.CharField(blank=True, max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name="Machine",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=40, unique=True)),
                (
                    "node_name",
                    acl.models.NodeField(
                        blank=True,
                        help_text="Name of the controlling node",
                        max_length=20,
                    ),
                ),
                (
                    "node_machine_name",
                    acl.models.NodeField(
                        blank=True,
                        help_text="Name of device or machine used by the node",
                        max_length=20,
                    ),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("requires_instruction", models.BooleanField(default=False)),
                ("requires_form", models.BooleanField(default=False)),
                ("out_of_order", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="PermitType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=40, unique=True)),
                ("description", models.CharField(max_length=200)),
                (
                    "require_ok_trustee",
                    models.BooleanField(
                        default=False,
                        help_text="i.e. the trustees need to also explictly approve it when the permit is granted.",
                        verbose_name="Requires explicit trustee OK",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RecentUse",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("used", models.DateTimeField(auto_now=True)),
                (
                    "machine",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="acl.machine"
                    ),
                ),
            ],
        ),
    ]
